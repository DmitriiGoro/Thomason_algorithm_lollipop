### YamlMime:ManagedReference
items:
- uid: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle
  commentId: T:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle
  id: CubicGraphWithCycle
  parent: ThomasonAlgorithm.Core.Graphs
  children:
  - ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.#ctor(ThomasonAlgorithm.Core.Graphs.CubicGraph)
  - ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.#ctor(ThomasonAlgorithm.Core.Graphs.CubicGraph,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}})
  - ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.Graph
  - ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.HamiltonianCycle
  langs:
  - csharp
  - vb
  name: CubicGraphWithCycle
  nameWithType: CubicGraphWithCycle
  fullName: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle
  type: Class
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/CubicGraphWithCycle.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: CubicGraphWithCycle
    path: ../src/ThomasonAlgorithm.Core/Graphs/CubicGraphWithCycle.cs
    startLine: 10
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: >-
    Represents a cubic graph with an associated Hamiltonian cycle. 

    Provides functionality to initialize the graph with or without a provided cycle.
  remarks: >-
    This class ensures that a Hamiltonian cycle is explicitly associated with a specific cubic graph,

    providing better consistency and clarity when passing this data between methods or components.
  example: []
  syntax:
    content: public class CubicGraphWithCycle
    content.vb: Public Class CubicGraphWithCycle
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.#ctor(ThomasonAlgorithm.Core.Graphs.CubicGraph,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}})
  commentId: M:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.#ctor(ThomasonAlgorithm.Core.Graphs.CubicGraph,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}})
  id: '#ctor(ThomasonAlgorithm.Core.Graphs.CubicGraph,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}})'
  parent: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle
  langs:
  - csharp
  - vb
  name: CubicGraphWithCycle(CubicGraph, Dictionary<int, List<int>>)
  nameWithType: CubicGraphWithCycle.CubicGraphWithCycle(CubicGraph, Dictionary<int, List<int>>)
  fullName: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.CubicGraphWithCycle(ThomasonAlgorithm.Core.Graphs.CubicGraph, System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<int>>)
  type: Constructor
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/CubicGraphWithCycle.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: .ctor
    path: ../src/ThomasonAlgorithm.Core/Graphs/CubicGraphWithCycle.cs
    startLine: 47
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Initializes a new instance of <xref href="ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle" data-throw-if-not-resolved="false"></xref> with a specified Hamiltonian cycle.
  remarks: >-
    <p>

    Use this constructor when you have a precomputed Hamiltonian cycle for the graph.

    The cycle will be used as-is without validation.

    </p>

    <p>

    The cycle must:

    </p>

    <ul><li>Contain all vertices of the graph exactly once</li><li>Form a single connected loop</li><li>Maintain cubic graph properties</li></ul>
  example:
  - >-
    <pre><code class="lang-csharp">var graph = new CubicGraph(adjacencyMatrix);

    var precomputedCycle = new Dictionary&lt;int, List&lt;int&gt;&gt;() { ... };

    var graphWithCycle = new CubicGraphWithCycle(graph, precomputedCycle);</code></pre>
  syntax:
    content: public CubicGraphWithCycle(CubicGraph graph, Dictionary<int, List<int>> cycle)
    parameters:
    - id: graph
      type: ThomasonAlgorithm.Core.Graphs.CubicGraph
      description: The cubic graph to associate with the cycle.
    - id: cycle
      type: System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}}
      description: >-
        A dictionary representing the Hamiltonian cycle where:

        <ul><li>Keys are vertex indices</li><li>Values are lists of exactly 2 connected vertices</li></ul>
    content.vb: Public Sub New(graph As CubicGraph, cycle As Dictionary(Of Integer, List(Of Integer)))
  overload: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when either <code class="paramref">graph</code> or <code class="paramref">cycle</code> is null.
  nameWithType.vb: CubicGraphWithCycle.New(CubicGraph, Dictionary(Of Integer, List(Of Integer)))
  fullName.vb: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.New(ThomasonAlgorithm.Core.Graphs.CubicGraph, System.Collections.Generic.Dictionary(Of Integer, System.Collections.Generic.List(Of Integer)))
  name.vb: New(CubicGraph, Dictionary(Of Integer, List(Of Integer)))
- uid: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.#ctor(ThomasonAlgorithm.Core.Graphs.CubicGraph)
  commentId: M:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.#ctor(ThomasonAlgorithm.Core.Graphs.CubicGraph)
  id: '#ctor(ThomasonAlgorithm.Core.Graphs.CubicGraph)'
  parent: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle
  langs:
  - csharp
  - vb
  name: CubicGraphWithCycle(CubicGraph)
  nameWithType: CubicGraphWithCycle.CubicGraphWithCycle(CubicGraph)
  fullName: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.CubicGraphWithCycle(ThomasonAlgorithm.Core.Graphs.CubicGraph)
  type: Constructor
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/CubicGraphWithCycle.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: .ctor
    path: ../src/ThomasonAlgorithm.Core/Graphs/CubicGraphWithCycle.cs
    startLine: 77
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Initializes a new instance of <xref href="ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle" data-throw-if-not-resolved="false"></xref> with a generated Hamiltonian cycle.
  remarks: >-
    <p>

    Automatically generates a trivial Hamiltonian cycle using <xref href="ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.CreateCubicGraphHamiltonianCycle(ThomasonAlgorithm.Core.Graphs.CubicGraph)" data-throw-if-not-resolved="false"></xref>.

    The generated cycle connects vertices in sequential order (0→1→2...→n-1→0).

    </p>

    <p>

    For non-trivial cycles, use the constructor that accepts a precomputed cycle.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">var graph = new CubicGraph(adjacencyMatrix);

    var graphWithCycle = new CubicGraphWithCycle(graph); // Generates default cycle</code></pre>
  syntax:
    content: public CubicGraphWithCycle(CubicGraph graph)
    parameters:
    - id: graph
      type: ThomasonAlgorithm.Core.Graphs.CubicGraph
      description: The cubic graph for which to generate a Hamiltonian cycle.
    content.vb: Public Sub New(graph As CubicGraph)
  overload: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">graph</code> is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the graph is not cubic (any vertex doesn't have degree 3).
  seealso:
  - linkId: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.CreateCubicGraphHamiltonianCycle(ThomasonAlgorithm.Core.Graphs.CubicGraph)
    commentId: M:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.CreateCubicGraphHamiltonianCycle(ThomasonAlgorithm.Core.Graphs.CubicGraph)
  nameWithType.vb: CubicGraphWithCycle.New(CubicGraph)
  fullName.vb: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.New(ThomasonAlgorithm.Core.Graphs.CubicGraph)
  name.vb: New(CubicGraph)
- uid: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.Graph
  commentId: P:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.Graph
  id: Graph
  parent: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle
  langs:
  - csharp
  - vb
  name: Graph
  nameWithType: CubicGraphWithCycle.Graph
  fullName: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.Graph
  type: Property
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/CubicGraphWithCycle.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: Graph
    path: ../src/ThomasonAlgorithm.Core/Graphs/CubicGraphWithCycle.cs
    startLine: 97
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Gets the underlying cubic graph associated with this instance.
  remarks: >-
    The graph maintains these properties:

    <ul><li>3-regular (each vertex has degree 3)</li><li>Undirected (edges are bidirectional)</li><li>No self-loops</li></ul>
  example: []
  syntax:
    content: public CubicGraph Graph { get; }
    parameters: []
    return:
      type: ThomasonAlgorithm.Core.Graphs.CubicGraph
      description: A <xref href="ThomasonAlgorithm.Core.Graphs.CubicGraph" data-throw-if-not-resolved="false"></xref> object representing the graph structure.
    content.vb: Public ReadOnly Property Graph As CubicGraph
  overload: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.Graph*
- uid: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.HamiltonianCycle
  commentId: P:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.HamiltonianCycle
  id: HamiltonianCycle
  parent: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle
  langs:
  - csharp
  - vb
  name: HamiltonianCycle
  nameWithType: CubicGraphWithCycle.HamiltonianCycle
  fullName: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.HamiltonianCycle
  type: Property
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/CubicGraphWithCycle.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: HamiltonianCycle
    path: ../src/ThomasonAlgorithm.Core/Graphs/CubicGraphWithCycle.cs
    startLine: 116
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Gets the Hamiltonian cycle associated with the graph.
  remarks: >-
    The cycle is represented as an adjacency dictionary where:

    <ul><li>Keys are vertex indices (0-based)</li><li>Values are lists containing exactly 2 connected vertices</li></ul>

    This ensures the cycle forms a single loop through all vertices.
  example:
  - 'For a 4-vertex cycle: { 0:[3,1], 1:[0,2], 2:[1,3], 3:[2,0] }'
  syntax:
    content: public Dictionary<int, List<int>> HamiltonianCycle { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}}
      description: A dictionary mapping each vertex to its two adjacent vertices in the cycle.
    content.vb: Public ReadOnly Property HamiltonianCycle As Dictionary(Of Integer, List(Of Integer))
  overload: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.HamiltonianCycle*
references:
- uid: ThomasonAlgorithm.Core.Graphs
  commentId: N:ThomasonAlgorithm.Core.Graphs
  href: ThomasonAlgorithm.html
  name: ThomasonAlgorithm.Core.Graphs
  nameWithType: ThomasonAlgorithm.Core.Graphs
  fullName: ThomasonAlgorithm.Core.Graphs
  spec.csharp:
  - uid: ThomasonAlgorithm
    name: ThomasonAlgorithm
    href: ThomasonAlgorithm.html
  - name: .
  - uid: ThomasonAlgorithm.Core
    name: Core
    href: ThomasonAlgorithm.Core.html
  - name: .
  - uid: ThomasonAlgorithm.Core.Graphs
    name: Graphs
    href: ThomasonAlgorithm.Core.Graphs.html
  spec.vb:
  - uid: ThomasonAlgorithm
    name: ThomasonAlgorithm
    href: ThomasonAlgorithm.html
  - name: .
  - uid: ThomasonAlgorithm.Core
    name: Core
    href: ThomasonAlgorithm.Core.html
  - name: .
  - uid: ThomasonAlgorithm.Core.Graphs
    name: Graphs
    href: ThomasonAlgorithm.Core.Graphs.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle
  commentId: T:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle
  parent: ThomasonAlgorithm.Core.Graphs
  href: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.html
  name: CubicGraphWithCycle
  nameWithType: CubicGraphWithCycle
  fullName: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.#ctor*
  commentId: Overload:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.#ctor
  href: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.html#ThomasonAlgorithm_Core_Graphs_CubicGraphWithCycle__ctor_ThomasonAlgorithm_Core_Graphs_CubicGraph_System_Collections_Generic_Dictionary_System_Int32_System_Collections_Generic_List_System_Int32___
  name: CubicGraphWithCycle
  nameWithType: CubicGraphWithCycle.CubicGraphWithCycle
  fullName: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.CubicGraphWithCycle
  nameWithType.vb: CubicGraphWithCycle.New
  fullName.vb: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.New
  name.vb: New
- uid: ThomasonAlgorithm.Core.Graphs.CubicGraph
  commentId: T:ThomasonAlgorithm.Core.Graphs.CubicGraph
  parent: ThomasonAlgorithm.Core.Graphs
  href: ThomasonAlgorithm.Core.Graphs.CubicGraph.html
  name: CubicGraph
  nameWithType: CubicGraph
  fullName: ThomasonAlgorithm.Core.Graphs.CubicGraph
- uid: System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<int, List<int>>
  nameWithType: Dictionary<int, List<int>>
  fullName: System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<int>>
  nameWithType.vb: Dictionary(Of Integer, List(Of Integer))
  fullName.vb: System.Collections.Generic.Dictionary(Of Integer, System.Collections.Generic.List(Of Integer))
  name.vb: Dictionary(Of Integer, List(Of Integer))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.CreateCubicGraphHamiltonianCycle(ThomasonAlgorithm.Core.Graphs.CubicGraph)
  commentId: M:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.CreateCubicGraphHamiltonianCycle(ThomasonAlgorithm.Core.Graphs.CubicGraph)
  href: ThomasonAlgorithm.Core.Graphs.CubicGraph.html
  name: CreateCubicGraphHamiltonianCycle(CubicGraph)
  nameWithType: CubicGraphWithCycle.CreateCubicGraphHamiltonianCycle(CubicGraph)
  fullName: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.CreateCubicGraphHamiltonianCycle(ThomasonAlgorithm.Core.Graphs.CubicGraph)
  spec.csharp:
  - uid: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.CreateCubicGraphHamiltonianCycle(ThomasonAlgorithm.Core.Graphs.CubicGraph)
    name: CreateCubicGraphHamiltonianCycle
  - name: (
  - uid: ThomasonAlgorithm.Core.Graphs.CubicGraph
    name: CubicGraph
    href: ThomasonAlgorithm.Core.Graphs.CubicGraph.html
  - name: )
  spec.vb:
  - uid: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.CreateCubicGraphHamiltonianCycle(ThomasonAlgorithm.Core.Graphs.CubicGraph)
    name: CreateCubicGraphHamiltonianCycle
  - name: (
  - uid: ThomasonAlgorithm.Core.Graphs.CubicGraph
    name: CubicGraph
    href: ThomasonAlgorithm.Core.Graphs.CubicGraph.html
  - name: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.Graph*
  commentId: Overload:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.Graph
  href: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.html#ThomasonAlgorithm_Core_Graphs_CubicGraphWithCycle_Graph
  name: Graph
  nameWithType: CubicGraphWithCycle.Graph
  fullName: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.Graph
- uid: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.HamiltonianCycle*
  commentId: Overload:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.HamiltonianCycle
  href: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.html#ThomasonAlgorithm_Core_Graphs_CubicGraphWithCycle_HamiltonianCycle
  name: HamiltonianCycle
  nameWithType: CubicGraphWithCycle.HamiltonianCycle
  fullName: ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.HamiltonianCycle
