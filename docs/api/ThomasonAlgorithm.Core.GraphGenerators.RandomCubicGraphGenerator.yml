### YamlMime:ManagedReference
items:
- uid: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator
  commentId: T:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator
  id: RandomCubicGraphGenerator
  parent: ThomasonAlgorithm.Core.GraphGenerators
  children:
  - ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet(System.Int32,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)
  - ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphLimitedChords(System.Int32,System.Int32,System.Int32,System.Int32)
  - ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths(System.Int32,System.Int32,System.Int32,ThomasonAlgorithm.Core.Models.Gap,System.Int32)
  - ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords(System.Int32,System.Int32,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: RandomCubicGraphGenerator
  nameWithType: RandomCubicGraphGenerator
  fullName: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator
  type: Class
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/GraphGenerators/RandomCubicGraphGenerator.cs
      branch: first-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: RandomCubicGraphGenerator
    path: ../src/ThomasonAlgorithm.Core/GraphGenerators/RandomCubicGraphGenerator.cs
    startLine: 10
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.GraphGenerators
  summary: >-
    A utility class for generating random cubic (3-regular) graphs with a specified number of vertices.

    The generated graph ensures that each vertex has exactly 3 neighbors, adhering to the properties of a cubic graph.

    Additionally, this class provides methods for generating cubic graphs with various constraints on chord lengths.
  example: []
  syntax:
    content: public static class RandomCubicGraphGenerator
    content.vb: Public Module RandomCubicGraphGenerator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphLimitedChords(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphLimitedChords(System.Int32,System.Int32,System.Int32,System.Int32)
  id: GenerateGraphLimitedChords(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator
  langs:
  - csharp
  - vb
  name: GenerateGraphLimitedChords(int, int, int, int)
  nameWithType: RandomCubicGraphGenerator.GenerateGraphLimitedChords(int, int, int, int)
  fullName: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphLimitedChords(int, int, int, int)
  type: Method
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/GraphGenerators/RandomCubicGraphGenerator.cs
      branch: first-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: GenerateGraphLimitedChords
    path: ../src/ThomasonAlgorithm.Core/GraphGenerators/RandomCubicGraphGenerator.cs
    startLine: 25
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.GraphGenerators
  summary: Generates a cubic graph (3-regular graph) where chord lengths are restricted to be within the inclusive range [kLow, kUp].
  example: []
  syntax:
    content: public static CubicGraph? GenerateGraphLimitedChords(int n, int kLow, int kUp, int maxAttempts = 100)
    parameters:
    - id: n
      type: System.Int32
      description: The number of vertices in the graph. Must be an even number ≥ 4.
    - id: kLow
      type: System.Int32
      description: The minimum allowed chord length (inclusive).
    - id: kUp
      type: System.Int32
      description: The maximum allowed chord length (inclusive).
    - id: maxAttempts
      type: System.Int32
      description: Maximum number of attempts to generate a valid graph. Default is 100.
    return:
      type: ThomasonAlgorithm.Core.Graphs.CubicGraph
      description: >-
        A cubic graph where all chords have lengths within the range [<code class="paramref">kLow</code>, <code class="paramref">kUp</code>],

        or <code>null</code> if generation fails within the given number of attempts.
    content.vb: Public Shared Function GenerateGraphLimitedChords(n As Integer, kLow As Integer, kUp As Integer, maxAttempts As Integer = 100) As CubicGraph
  overload: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphLimitedChords*
  nameWithType.vb: RandomCubicGraphGenerator.GenerateGraphLimitedChords(Integer, Integer, Integer, Integer)
  fullName.vb: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphLimitedChords(Integer, Integer, Integer, Integer)
  name.vb: GenerateGraphLimitedChords(Integer, Integer, Integer, Integer)
- uid: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords(System.Int32,System.Int32,System.Int32,System.Int32)
  id: GenerateGraphWithOddLengthChords(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator
  langs:
  - csharp
  - vb
  name: GenerateGraphWithOddLengthChords(int, int, int, int)
  nameWithType: RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords(int, int, int, int)
  fullName: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords(int, int, int, int)
  type: Method
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/GraphGenerators/RandomCubicGraphGenerator.cs
      branch: first-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: GenerateGraphWithOddLengthChords
    path: ../src/ThomasonAlgorithm.Core/GraphGenerators/RandomCubicGraphGenerator.cs
    startLine: 40
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.GraphGenerators
  summary: >-
    Generates a cubic graph (3-regular graph) where only chords of odd lengths within the given bounds are allowed.

    The resulting graph is guaranteed to be bipartite due to the restriction on odd-length chords.
  example: []
  syntax:
    content: public static CubicGraph? GenerateGraphWithOddLengthChords(int n, int kLow, int kUp, int maxAttempts = 100)
    parameters:
    - id: n
      type: System.Int32
      description: The number of vertices in the graph. Must be an even number ≥ 4.
    - id: kLow
      type: System.Int32
      description: The minimum chord length (inclusive).
    - id: kUp
      type: System.Int32
      description: The maximum chord length (inclusive).
    - id: maxAttempts
      type: System.Int32
      description: Maximum number of attempts to generate a valid graph. Default is 100.
    return:
      type: ThomasonAlgorithm.Core.Graphs.CubicGraph
      description: >-
        A bipartite cubic graph containing only odd-length chords in the range [<code class="paramref">kLow</code>, <code class="paramref">kUp</code>],

        or <code>null</code> if generation fails within the given number of attempts.
    content.vb: Public Shared Function GenerateGraphWithOddLengthChords(n As Integer, kLow As Integer, kUp As Integer, maxAttempts As Integer = 100) As CubicGraph
  overload: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords*
  nameWithType.vb: RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords(Integer, Integer, Integer, Integer)
  fullName.vb: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords(Integer, Integer, Integer, Integer)
  name.vb: GenerateGraphWithOddLengthChords(Integer, Integer, Integer, Integer)
- uid: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths(System.Int32,System.Int32,System.Int32,ThomasonAlgorithm.Core.Models.Gap,System.Int32)
  commentId: M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths(System.Int32,System.Int32,System.Int32,ThomasonAlgorithm.Core.Models.Gap,System.Int32)
  id: GenerateGraphWithGapInChordLengths(System.Int32,System.Int32,System.Int32,ThomasonAlgorithm.Core.Models.Gap,System.Int32)
  parent: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator
  langs:
  - csharp
  - vb
  name: GenerateGraphWithGapInChordLengths(int, int, int, Gap, int)
  nameWithType: RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths(int, int, int, Gap, int)
  fullName: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths(int, int, int, ThomasonAlgorithm.Core.Models.Gap, int)
  type: Method
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/GraphGenerators/RandomCubicGraphGenerator.cs
      branch: first-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: GenerateGraphWithGapInChordLengths
    path: ../src/ThomasonAlgorithm.Core/GraphGenerators/RandomCubicGraphGenerator.cs
    startLine: 62
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.GraphGenerators
  summary: >-
    Generates a cubic graph (3-regular graph) where chord lengths are within the specified range

    <code class="paramref">kLow</code> to <code class="paramref">kUp</code>, but exclude a specific gap range.
  example: []
  syntax:
    content: public static CubicGraph? GenerateGraphWithGapInChordLengths(int n, int kLow, int kUp, Gap gap, int maxAttempts = 100)
    parameters:
    - id: n
      type: System.Int32
      description: The number of vertices in the graph. Must be an even number ≥ 4.
    - id: kLow
      type: System.Int32
      description: The minimum allowed chord length.
    - id: kUp
      type: System.Int32
      description: The maximum allowed chord length.
    - id: gap
      type: ThomasonAlgorithm.Core.Models.Gap
      description: >-
        A <xref href="ThomasonAlgorithm.Core.Models.Gap" data-throw-if-not-resolved="false"></xref> struct specifying the range of chord lengths to exclude from the graph.

        For example, if the gap is [5–7], then chords of lengths 5, 6, and 7 will be excluded.
    - id: maxAttempts
      type: System.Int32
      description: Maximum number of attempts to generate a valid graph. Default is 100.
    return:
      type: ThomasonAlgorithm.Core.Graphs.CubicGraph
      description: >-
        A cubic graph that avoids the specified gap in chord lengths, or <code>null</code> if no valid graph is found

        within the allowed number of attempts.
    content.vb: Public Shared Function GenerateGraphWithGapInChordLengths(n As Integer, kLow As Integer, kUp As Integer, gap As Gap, maxAttempts As Integer = 100) As CubicGraph
  overload: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths*
  nameWithType.vb: RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths(Integer, Integer, Integer, Gap, Integer)
  fullName.vb: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths(Integer, Integer, Integer, ThomasonAlgorithm.Core.Models.Gap, Integer)
  name.vb: GenerateGraphWithGapInChordLengths(Integer, Integer, Integer, Gap, Integer)
- uid: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet(System.Int32,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)
  commentId: M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet(System.Int32,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)
  id: GenerateGraphFromExactChordsSet(System.Int32,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)
  parent: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator
  langs:
  - csharp
  - vb
  name: GenerateGraphFromExactChordsSet(int, int, int, Dictionary<int, int>, int)
  nameWithType: RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet(int, int, int, Dictionary<int, int>, int)
  fullName: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet(int, int, int, System.Collections.Generic.Dictionary<int, int>, int)
  type: Method
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/GraphGenerators/RandomCubicGraphGenerator.cs
      branch: first-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: GenerateGraphFromExactChordsSet
    path: ../src/ThomasonAlgorithm.Core/GraphGenerators/RandomCubicGraphGenerator.cs
    startLine: 82
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.GraphGenerators
  summary: Generates a cubic graph (3-regular graph) with a precise number of chords for each specified chord length.
  example: []
  syntax:
    content: public static CubicGraph? GenerateGraphFromExactChordsSet(int n, int kLow, int kUp, Dictionary<int, int> chordsLengthDictionary, int maxAttempts = 100)
    parameters:
    - id: n
      type: System.Int32
      description: The number of vertices in the graph. Must be an even number ≥ 4.
    - id: kLow
      type: System.Int32
      description: The minimum allowed chord length.
    - id: kUp
      type: System.Int32
      description: The maximum allowed chord length.
    - id: chordsLengthDictionary
      type: System.Collections.Generic.Dictionary{System.Int32,System.Int32}
      description: A dictionary mapping chord lengths to the exact number of chords of that length that must appear in the graph.
    - id: maxAttempts
      type: System.Int32
      description: The maximum number of attempts to generate a valid graph. Default is 100.
    return:
      type: ThomasonAlgorithm.Core.Graphs.CubicGraph
      description: >-
        A cubic graph that matches the exact chord length distribution if one is found within the allowed attempts;

        otherwise, returns <code>null</code>.
    content.vb: Public Shared Function GenerateGraphFromExactChordsSet(n As Integer, kLow As Integer, kUp As Integer, chordsLengthDictionary As Dictionary(Of Integer, Integer), maxAttempts As Integer = 100) As CubicGraph
  overload: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet*
  nameWithType.vb: RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet(Integer, Integer, Integer, Dictionary(Of Integer, Integer), Integer)
  fullName.vb: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet(Integer, Integer, Integer, System.Collections.Generic.Dictionary(Of Integer, Integer), Integer)
  name.vb: GenerateGraphFromExactChordsSet(Integer, Integer, Integer, Dictionary(Of Integer, Integer), Integer)
references:
- uid: ThomasonAlgorithm.Core.GraphGenerators
  commentId: N:ThomasonAlgorithm.Core.GraphGenerators
  href: ThomasonAlgorithm.html
  name: ThomasonAlgorithm.Core.GraphGenerators
  nameWithType: ThomasonAlgorithm.Core.GraphGenerators
  fullName: ThomasonAlgorithm.Core.GraphGenerators
  spec.csharp:
  - uid: ThomasonAlgorithm
    name: ThomasonAlgorithm
    href: ThomasonAlgorithm.html
  - name: .
  - uid: ThomasonAlgorithm.Core
    name: Core
    href: ThomasonAlgorithm.Core.html
  - name: .
  - uid: ThomasonAlgorithm.Core.GraphGenerators
    name: GraphGenerators
    href: ThomasonAlgorithm.Core.GraphGenerators.html
  spec.vb:
  - uid: ThomasonAlgorithm
    name: ThomasonAlgorithm
    href: ThomasonAlgorithm.html
  - name: .
  - uid: ThomasonAlgorithm.Core
    name: Core
    href: ThomasonAlgorithm.Core.html
  - name: .
  - uid: ThomasonAlgorithm.Core.GraphGenerators
    name: GraphGenerators
    href: ThomasonAlgorithm.Core.GraphGenerators.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphLimitedChords*
  commentId: Overload:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphLimitedChords
  href: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.html#ThomasonAlgorithm_Core_GraphGenerators_RandomCubicGraphGenerator_GenerateGraphLimitedChords_System_Int32_System_Int32_System_Int32_System_Int32_
  name: GenerateGraphLimitedChords
  nameWithType: RandomCubicGraphGenerator.GenerateGraphLimitedChords
  fullName: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphLimitedChords
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: ThomasonAlgorithm.Core.Graphs.CubicGraph
  commentId: T:ThomasonAlgorithm.Core.Graphs.CubicGraph
  parent: ThomasonAlgorithm.Core.Graphs
  href: ThomasonAlgorithm.Core.Graphs.CubicGraph.html
  name: CubicGraph
  nameWithType: CubicGraph
  fullName: ThomasonAlgorithm.Core.Graphs.CubicGraph
- uid: ThomasonAlgorithm.Core.Graphs
  commentId: N:ThomasonAlgorithm.Core.Graphs
  href: ThomasonAlgorithm.html
  name: ThomasonAlgorithm.Core.Graphs
  nameWithType: ThomasonAlgorithm.Core.Graphs
  fullName: ThomasonAlgorithm.Core.Graphs
  spec.csharp:
  - uid: ThomasonAlgorithm
    name: ThomasonAlgorithm
    href: ThomasonAlgorithm.html
  - name: .
  - uid: ThomasonAlgorithm.Core
    name: Core
    href: ThomasonAlgorithm.Core.html
  - name: .
  - uid: ThomasonAlgorithm.Core.Graphs
    name: Graphs
    href: ThomasonAlgorithm.Core.Graphs.html
  spec.vb:
  - uid: ThomasonAlgorithm
    name: ThomasonAlgorithm
    href: ThomasonAlgorithm.html
  - name: .
  - uid: ThomasonAlgorithm.Core
    name: Core
    href: ThomasonAlgorithm.Core.html
  - name: .
  - uid: ThomasonAlgorithm.Core.Graphs
    name: Graphs
    href: ThomasonAlgorithm.Core.Graphs.html
- uid: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords*
  commentId: Overload:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords
  href: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.html#ThomasonAlgorithm_Core_GraphGenerators_RandomCubicGraphGenerator_GenerateGraphWithOddLengthChords_System_Int32_System_Int32_System_Int32_System_Int32_
  name: GenerateGraphWithOddLengthChords
  nameWithType: RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords
  fullName: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords
- uid: ThomasonAlgorithm.Core.Models.Gap
  commentId: T:ThomasonAlgorithm.Core.Models.Gap
  parent: ThomasonAlgorithm.Core.Models
  href: ThomasonAlgorithm.Core.Models.Gap.html
  name: Gap
  nameWithType: Gap
  fullName: ThomasonAlgorithm.Core.Models.Gap
- uid: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths*
  commentId: Overload:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths
  href: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.html#ThomasonAlgorithm_Core_GraphGenerators_RandomCubicGraphGenerator_GenerateGraphWithGapInChordLengths_System_Int32_System_Int32_System_Int32_ThomasonAlgorithm_Core_Models_Gap_System_Int32_
  name: GenerateGraphWithGapInChordLengths
  nameWithType: RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths
  fullName: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths
- uid: ThomasonAlgorithm.Core.Models
  commentId: N:ThomasonAlgorithm.Core.Models
  href: ThomasonAlgorithm.html
  name: ThomasonAlgorithm.Core.Models
  nameWithType: ThomasonAlgorithm.Core.Models
  fullName: ThomasonAlgorithm.Core.Models
  spec.csharp:
  - uid: ThomasonAlgorithm
    name: ThomasonAlgorithm
    href: ThomasonAlgorithm.html
  - name: .
  - uid: ThomasonAlgorithm.Core
    name: Core
    href: ThomasonAlgorithm.Core.html
  - name: .
  - uid: ThomasonAlgorithm.Core.Models
    name: Models
    href: ThomasonAlgorithm.Core.Models.html
  spec.vb:
  - uid: ThomasonAlgorithm
    name: ThomasonAlgorithm
    href: ThomasonAlgorithm.html
  - name: .
  - uid: ThomasonAlgorithm.Core
    name: Core
    href: ThomasonAlgorithm.Core.html
  - name: .
  - uid: ThomasonAlgorithm.Core.Models
    name: Models
    href: ThomasonAlgorithm.Core.Models.html
- uid: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet*
  commentId: Overload:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet
  href: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.html#ThomasonAlgorithm_Core_GraphGenerators_RandomCubicGraphGenerator_GenerateGraphFromExactChordsSet_System_Int32_System_Int32_System_Int32_System_Collections_Generic_Dictionary_System_Int32_System_Int32__System_Int32_
  name: GenerateGraphFromExactChordsSet
  nameWithType: RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet
  fullName: ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet
- uid: System.Collections.Generic.Dictionary{System.Int32,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<int, int>
  nameWithType: Dictionary<int, int>
  fullName: System.Collections.Generic.Dictionary<int, int>
  nameWithType.vb: Dictionary(Of Integer, Integer)
  fullName.vb: System.Collections.Generic.Dictionary(Of Integer, Integer)
  name.vb: Dictionary(Of Integer, Integer)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
