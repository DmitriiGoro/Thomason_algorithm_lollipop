{
  "api/ThomasonAlgorithm.Core.Algorithm.LollipopAlgorithm.html": {
    "href": "api/ThomasonAlgorithm.Core.Algorithm.LollipopAlgorithm.html",
    "title": "Class LollipopAlgorithm | Thomason Algorithm Documentation",
    "summary": "Class LollipopAlgorithm Provides a static implementation of Thomason's Lollipop Algorithm for transforming an existing Hamiltonian cycle in a cubic graph into a second distinct Hamiltonian cycle. Inheritance object LollipopAlgorithm Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ThomasonAlgorithm.Core.Algorithm Assembly: ThomasonAlgorithm.Core.dll Syntax public static class LollipopAlgorithm Remarks The algorithm requires a valid Hamiltonian cycle to be provided as input. It modifies a copy of the input cycle without altering the original, allowing non-destructive exploration of Hamiltonian paths. It is assumed that the input Hamiltonian cycle starts at vertex 0. The first edge removed during the algorithm's execution is (0, n-1). Methods | Edit this page View Source FindSecondHamiltonianCycleAndReturnSteps(CubicGraphWithCycle) Applies the Thomason's lollipop algorithm to reconstruct a second Hamiltonian cycle from the one provided in the CubicGraphWithCycle instance, and returns the number of steps taken by the algorithm. Declaration public static int FindSecondHamiltonianCycleAndReturnSteps(CubicGraphWithCycle cubicGraph) Parameters Type Name Description CubicGraphWithCycle cubicGraph An object that encapsulates a cubic graph and one of its Hamiltonian cycles. Returns Type Description int The number of steps performed by the algorithm during the reconstruction of the second cycle. Remarks The provided Hamiltonian cycle will be modified in-place to represent the second Hamiltonian cycle. Make sure to pass a deep copy if the original cycle should be preserved. | Edit this page View Source GetHamiltonianCycleSequencedVertices(Dictionary<int, List<int>>) Gets the set of vertices in the Hamiltonian cycle, ordered in the sequence they appear in the cycle, starting from vertex 0. Declaration public static HashSet<int> GetHamiltonianCycleSequencedVertices(Dictionary<int, List<int>> hamiltonianCycle) Parameters Type Name Description Dictionary<int, List<int>> hamiltonianCycle A dictionary representing the Hamiltonian cycle, where each vertex is mapped to its list of neighbors in the cycle. Returns Type Description HashSet<int> A HashSet<T> containing the vertices of the Hamiltonian cycle in the order they appear in the cycle starting from 0."
  },
  "api/ThomasonAlgorithm.Core.Algorithm.html": {
    "href": "api/ThomasonAlgorithm.Core.Algorithm.html",
    "title": "Namespace ThomasonAlgorithm.Core.Algorithm | Thomason Algorithm Documentation",
    "summary": "Namespace ThomasonAlgorithm.Core.Algorithm Classes LollipopAlgorithm Provides a static implementation of Thomason's Lollipop Algorithm for transforming an existing Hamiltonian cycle in a cubic graph into a second distinct Hamiltonian cycle."
  },
  "api/ThomasonAlgorithm.Core.Extensions.ListExtensions.html": {
    "href": "api/ThomasonAlgorithm.Core.Extensions.ListExtensions.html",
    "title": "Class ListExtensions | Thomason Algorithm Documentation",
    "summary": "Class ListExtensions Inheritance object ListExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ThomasonAlgorithm.Core.Extensions Assembly: ThomasonAlgorithm.Core.dll Syntax public static class ListExtensions Methods | Edit this page View Source FirstPossibleNeighborOrNull(List<int>, Func<int, bool>) Returns the first element in the list that satisfies the specified predicate, or null if no such element exists. Declaration public static int? FirstPossibleNeighborOrNull(this List<int> source, Func<int, bool> predicate) Parameters Type Name Description List<int> source The list of integers to search through. Func<int, bool> predicate The predicate function used to test each element. Returns Type Description int? The first element that matches the predicate, or null if no matching element is found. Exceptions Type Condition ArgumentNullException Thrown if source or predicate is null."
  },
  "api/ThomasonAlgorithm.Core.Extensions.html": {
    "href": "api/ThomasonAlgorithm.Core.Extensions.html",
    "title": "Namespace ThomasonAlgorithm.Core.Extensions | Thomason Algorithm Documentation",
    "summary": "Namespace ThomasonAlgorithm.Core.Extensions Classes ListExtensions"
  },
  "api/ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.html": {
    "href": "api/ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.html",
    "title": "Class RandomCubicGraphGenerator | Thomason Algorithm Documentation",
    "summary": "Class RandomCubicGraphGenerator A utility class for generating random cubic (3-regular) graphs with a specified number of vertices. The generated graph ensures that each vertex has exactly 3 neighbors, adhering to the properties of a cubic graph. Additionally, this class provides methods for generating cubic graphs with various constraints on chord lengths. Inheritance object RandomCubicGraphGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ThomasonAlgorithm.Core.GraphGenerators Assembly: ThomasonAlgorithm.Core.dll Syntax public static class RandomCubicGraphGenerator Methods | Edit this page View Source GenerateGraphFromExactChordsSet(int, int, int, Dictionary<int, int>, int) Generates a cubic graph (3-regular graph) with a precise number of chords for each specified chord length. Declaration public static CubicGraph? GenerateGraphFromExactChordsSet(int n, int kLow, int kUp, Dictionary<int, int> chordsLengthDictionary, int maxAttempts = 100) Parameters Type Name Description int n The number of vertices in the graph. Must be an even number ≥ 4. int kLow The minimum allowed chord length. int kUp The maximum allowed chord length. Dictionary<int, int> chordsLengthDictionary A dictionary mapping chord lengths to the exact number of chords of that length that must appear in the graph. int maxAttempts The maximum number of attempts to generate a valid graph. Default is 100. Returns Type Description CubicGraph A cubic graph that matches the exact chord length distribution if one is found within the allowed attempts; otherwise, returns null. | Edit this page View Source GenerateGraphLimitedChords(int, int, int, int) Generates a cubic graph (3-regular graph) where chord lengths are restricted to be within the inclusive range [kLow, kUp]. Declaration public static CubicGraph? GenerateGraphLimitedChords(int n, int kLow, int kUp, int maxAttempts = 100) Parameters Type Name Description int n The number of vertices in the graph. Must be an even number ≥ 4. int kLow The minimum allowed chord length (inclusive). int kUp The maximum allowed chord length (inclusive). int maxAttempts Maximum number of attempts to generate a valid graph. Default is 100. Returns Type Description CubicGraph A cubic graph where all chords have lengths within the range [kLow, kUp], or null if generation fails within the given number of attempts. | Edit this page View Source GenerateGraphWithGapInChordLengths(int, int, int, Gap, int) Generates a cubic graph (3-regular graph) where chord lengths are within the specified range kLow to kUp, but exclude a specific gap range. Declaration public static CubicGraph? GenerateGraphWithGapInChordLengths(int n, int kLow, int kUp, Gap gap, int maxAttempts = 100) Parameters Type Name Description int n The number of vertices in the graph. Must be an even number ≥ 4. int kLow The minimum allowed chord length. int kUp The maximum allowed chord length. Gap gap A Gap struct specifying the range of chord lengths to exclude from the graph. For example, if the gap is [5–7], then chords of lengths 5, 6, and 7 will be excluded. int maxAttempts Maximum number of attempts to generate a valid graph. Default is 100. Returns Type Description CubicGraph A cubic graph that avoids the specified gap in chord lengths, or null if no valid graph is found within the allowed number of attempts. | Edit this page View Source GenerateGraphWithOddLengthChords(int, int, int, int) Generates a cubic graph (3-regular graph) where only chords of odd lengths within the given bounds are allowed. The resulting graph is guaranteed to be bipartite due to the restriction on odd-length chords. Declaration public static CubicGraph? GenerateGraphWithOddLengthChords(int n, int kLow, int kUp, int maxAttempts = 100) Parameters Type Name Description int n The number of vertices in the graph. Must be an even number ≥ 4. int kLow The minimum chord length (inclusive). int kUp The maximum chord length (inclusive). int maxAttempts Maximum number of attempts to generate a valid graph. Default is 100. Returns Type Description CubicGraph A bipartite cubic graph containing only odd-length chords in the range [kLow, kUp], or null if generation fails within the given number of attempts."
  },
  "api/ThomasonAlgorithm.Core.GraphGenerators.html": {
    "href": "api/ThomasonAlgorithm.Core.GraphGenerators.html",
    "title": "Namespace ThomasonAlgorithm.Core.GraphGenerators | Thomason Algorithm Documentation",
    "summary": "Namespace ThomasonAlgorithm.Core.GraphGenerators Classes RandomCubicGraphGenerator A utility class for generating random cubic (3-regular) graphs with a specified number of vertices. The generated graph ensures that each vertex has exactly 3 neighbors, adhering to the properties of a cubic graph. Additionally, this class provides methods for generating cubic graphs with various constraints on chord lengths."
  },
  "api/ThomasonAlgorithm.Core.Graphs.CubicGraph.html": {
    "href": "api/ThomasonAlgorithm.Core.Graphs.CubicGraph.html",
    "title": "Class CubicGraph | Thomason Algorithm Documentation",
    "summary": "Class CubicGraph Represents a cubic (3-regular) graph, where each vertex has exactly 3 neighbors. This class manages the graph structure, chord lengths, and Hamiltonian cycle. Inheritance object CubicGraph Implements IGraph Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ThomasonAlgorithm.Core.Graphs Assembly: ThomasonAlgorithm.Core.dll Syntax public class CubicGraph : IGraph Constructors | Edit this page View Source CubicGraph(int) Initializes a new instance of the CubicGraph class with an empty adjacency matrix of the specified size. Declaration public CubicGraph(int size) Parameters Type Name Description int size The number of vertices in the graph (the size of the square adjacency matrix). Remarks This constructor creates a graph with a zero-initialized adjacency matrix, allowing for manual or programmatic construction of edges. It does not enforce the cubic property upon creation. The resulting graph must be later modified to ensure that each vertex has degree 3 (i.e., the graph becomes cubic). Exceptions Type Condition ArgumentOutOfRangeException Thrown when size is less than 4. | Edit this page View Source CubicGraph(int[,]) Initializes a new instance of the CubicGraph class using the provided adjacency matrix. Declaration public CubicGraph(int[,] adjacencyMatrix) Parameters Type Name Description int[,] adjacencyMatrix A square matrix representing the adjacency structure of the graph. Remarks This constructor ensures that the input graph is cubic at the time of initialization. Exceptions Type Condition ArgumentOutOfRangeException Thrown if the provided adjacency matrix does not correspond to a valid cubic graph, i.e., each vertex must have exactly three edges. Fields | Edit this page View Source AdjacencyMatrix Declaration public readonly int[,] AdjacencyMatrix Field Value Type Description int[,] | Edit this page View Source ChordsLengths Dictionary holding the chord lengths and the number of times each chord length occurs. Declaration public readonly Dictionary<int, int> ChordsLengths Field Value Type Description Dictionary<int, int> | Edit this page View Source MaxChordLength Gets or sets the maximum chord length found in the graph. Declaration public int MaxChordLength Field Value Type Description int Properties | Edit this page View Source HamiltonianCycle Stores the Hamiltonian cycle of the graph, represented as a dictionary of vertices and their neighbors in the cycle. Declaration public Dictionary<int, List<int>> HamiltonianCycle { get; set; } Property Value Type Description Dictionary<int, List<int>> | Edit this page View Source VertexCount Gets the total number of vertices in the graph. Declaration public int VertexCount { get; } Property Value Type Description int Methods | Edit this page View Source AddChordLength(int) Adds a chord length to the collection, increasing its count. If the chord length doesn't exist in the collection, it will be added with an initial count of 1. Additionally, the method updates the maximum chord length if the new chord length exceeds the current maximum. Declaration public void AddChordLength(int chordLength) Parameters Type Name Description int chordLength The length of the chord to be added. Remarks This method maintains a collection of chord lengths, where each chord length is mapped to its frequency (how many times it has been added). It also keeps track of the maximum chord length encountered during the process. | Edit this page View Source AddEdge(int, int) Adds an edge between two vertices, ensuring the graph remains cubic (3-regular). Declaration public void AddEdge(int from, int to) Parameters Type Name Description int from The starting vertex of the edge. int to The ending vertex of the edge. Exceptions Type Condition InvalidOperationException Thrown if an edge already exists or the degree of a vertex exceeds 3. | Edit this page View Source GetNeighbors(int) Gets the list of neighbors (vertices connected by edges) for a specified vertex. Declaration public List<int> GetNeighbors(int vertex) Parameters Type Name Description int vertex The vertex for which neighbors are to be retrieved. Returns Type Description List<int> A list of neighboring vertices. | Edit this page View Source GetVertexDegree(int) Gets the degree of a vertex (the number of edges connected to it). Declaration public int GetVertexDegree(int vertex) Parameters Type Name Description int vertex The vertex whose degree is to be calculated. Returns Type Description int The degree of the specified vertex. | Edit this page View Source HasEdge(int, int) Checks whether an edge exists between two vertices. Declaration public bool HasEdge(int from, int to) Parameters Type Name Description int from The starting vertex of the edge. int to The ending vertex of the edge. Returns Type Description bool True if an edge exists between the two vertices; otherwise, false. | Edit this page View Source IsCubic() Checks if the graph is cubic, meaning each vertex has exactly 3 neighbors. Declaration public bool IsCubic() Returns Type Description bool True if the graph is cubic; otherwise, false. | Edit this page View Source RemoveEdge(int, int) Removes an edge between two vertices. Declaration public void RemoveEdge(int from, int to) Parameters Type Name Description int from The starting vertex of the edge. int to The ending vertex of the edge. Implements IGraph"
  },
  "api/ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.html": {
    "href": "api/ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle.html",
    "title": "Class CubicGraphWithCycle | Thomason Algorithm Documentation",
    "summary": "Class CubicGraphWithCycle Represents a cubic graph with an associated Hamiltonian cycle. Provides functionality to initialize the graph with or without a provided cycle. Inheritance object CubicGraphWithCycle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ThomasonAlgorithm.Core.Graphs Assembly: ThomasonAlgorithm.Core.dll Syntax public class CubicGraphWithCycle Remarks This class ensures that a Hamiltonian cycle is explicitly associated with a specific cubic graph, providing better consistency and clarity when passing this data between methods or components. Constructors | Edit this page View Source CubicGraphWithCycle(CubicGraph) Declaration public CubicGraphWithCycle(CubicGraph graph) Parameters Type Name Description CubicGraph graph | Edit this page View Source CubicGraphWithCycle(CubicGraph, Dictionary<int, List<int>>) Declaration public CubicGraphWithCycle(CubicGraph graph, Dictionary<int, List<int>> cycle) Parameters Type Name Description CubicGraph graph Dictionary<int, List<int>> cycle Properties | Edit this page View Source Graph Declaration public CubicGraph Graph { get; } Property Value Type Description CubicGraph | Edit this page View Source HamiltonianCycle Declaration public Dictionary<int, List<int>> HamiltonianCycle { get; } Property Value Type Description Dictionary<int, List<int>> Methods | Edit this page View Source CreateCubicGraphHamiltonianCycle(CubicGraph) Declaration public static Dictionary<int, List<int>> CreateCubicGraphHamiltonianCycle(CubicGraph graph) Parameters Type Name Description CubicGraph graph Returns Type Description Dictionary<int, List<int>>"
  },
  "api/ThomasonAlgorithm.Core.Graphs.IGraph.html": {
    "href": "api/ThomasonAlgorithm.Core.Graphs.IGraph.html",
    "title": "Interface IGraph | Thomason Algorithm Documentation",
    "summary": "Interface IGraph Namespace: ThomasonAlgorithm.Core.Graphs Assembly: ThomasonAlgorithm.Core.dll Syntax public interface IGraph Properties | Edit this page View Source VertexCount Declaration int VertexCount { get; } Property Value Type Description int Methods | Edit this page View Source AddEdge(int, int) Declaration void AddEdge(int from, int to) Parameters Type Name Description int from int to | Edit this page View Source GetNeighbors(int) Declaration List<int> GetNeighbors(int vertex) Parameters Type Name Description int vertex Returns Type Description List<int> | Edit this page View Source GetVertexDegree(int) Declaration int GetVertexDegree(int vertex) Parameters Type Name Description int vertex Returns Type Description int | Edit this page View Source HasEdge(int, int) Declaration bool HasEdge(int from, int to) Parameters Type Name Description int from int to Returns Type Description bool | Edit this page View Source RemoveEdge(int, int) Declaration void RemoveEdge(int from, int to) Parameters Type Name Description int from int to"
  },
  "api/ThomasonAlgorithm.Core.Graphs.html": {
    "href": "api/ThomasonAlgorithm.Core.Graphs.html",
    "title": "Namespace ThomasonAlgorithm.Core.Graphs | Thomason Algorithm Documentation",
    "summary": "Namespace ThomasonAlgorithm.Core.Graphs Classes CubicGraph Represents a cubic (3-regular) graph, where each vertex has exactly 3 neighbors. This class manages the graph structure, chord lengths, and Hamiltonian cycle. CubicGraphWithCycle Represents a cubic graph with an associated Hamiltonian cycle. Provides functionality to initialize the graph with or without a provided cycle. Interfaces IGraph"
  },
  "api/ThomasonAlgorithm.Core.Models.Gap.html": {
    "href": "api/ThomasonAlgorithm.Core.Models.Gap.html",
    "title": "Class Gap | Thomason Algorithm Documentation",
    "summary": "Class Gap Represents a range (gap) of integer values with a specified lower and upper bound. This is used to define a range of chord lengths to exclude or consider in graph generation. Inheritance object Gap Implements IEquatable<Gap> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: ThomasonAlgorithm.Core.Models Assembly: ThomasonAlgorithm.Core.dll Syntax public sealed record Gap : IEquatable<Gap> Constructors | Edit this page View Source Gap(int, int) Represents a range (gap) of integer values with a specified lower and upper bound. This is used to define a range of chord lengths to exclude or consider in graph generation. Declaration public Gap(int LeftBound, int RightBound) Parameters Type Name Description int LeftBound The inclusive lower bound of the gap range. int RightBound The inclusive upper bound of the gap range. Properties | Edit this page View Source LeftBound The inclusive lower bound of the gap range. Declaration public int LeftBound { get; init; } Property Value Type Description int | Edit this page View Source RightBound The inclusive upper bound of the gap range. Declaration public int RightBound { get; init; } Property Value Type Description int Implements IEquatable<T>"
  },
  "api/ThomasonAlgorithm.Core.Models.html": {
    "href": "api/ThomasonAlgorithm.Core.Models.html",
    "title": "Namespace ThomasonAlgorithm.Core.Models | Thomason Algorithm Documentation",
    "summary": "Namespace ThomasonAlgorithm.Core.Models Classes Gap Represents a range (gap) of integer values with a specified lower and upper bound. This is used to define a range of chord lengths to exclude or consider in graph generation."
  },
  "articles/getting-started.html": {
    "href": "articles/getting-started.html",
    "title": "Getting Started | Thomason Algorithm Documentation",
    "summary": "Getting Started Installation Add the library to your project via NuGet: dotnet add package ThomasonAlgorithm.Core"
  },
  "index.html": {
    "href": "index.html",
    "title": "Thomason Algorithm Documentation | Thomason Algorithm Documentation",
    "summary": "Thomason Algorithm Documentation Welcome to the documentation for ThomasonAlgorithm.Core, a .NET library for analyzing cubic graphs using Thomason's algorithm. Overview This library provides efficient tools for analyzing cubic graphs based on Thomason's algorithm. Navigation Getting Started API Reference"
  }
}