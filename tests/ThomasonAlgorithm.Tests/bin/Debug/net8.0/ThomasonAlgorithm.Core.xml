<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThomasonAlgorithm.Core</name>
    </assembly>
    <members>
        <member name="T:ThomasonAlgorithm.Core.Algorithm.LollipopAlgorithm">
            <summary>
            Provides a static implementation of Thomason's Lollipop Algorithm for transforming
            an existing Hamiltonian cycle in a cubic graph into a second distinct Hamiltonian cycle.
            </summary>
            <remarks>
            The algorithm requires a valid Hamiltonian cycle to be provided as input. It modifies a copy of the
            input cycle without altering the original, allowing non-destructive exploration of Hamiltonian paths.
            <para>
            It is assumed that the input Hamiltonian cycle starts at vertex 0.
            The first edge removed during the algorithm's execution is (0, n-1).
            </para>
            </remarks>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Algorithm.LollipopAlgorithm.FindSecondHamiltonianCycleAndReturnSteps(ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle)">
            <summary>
            Applies the Thomason's lollipop algorithm to reconstruct a second Hamiltonian cycle
            from the one provided in the <see cref="T:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle"/> instance,
            and returns the number of steps taken by the algorithm.
            </summary>
            <param name="cubicGraph">
            An object that encapsulates a cubic graph and one of its Hamiltonian cycles.
            </param>
            <returns>
            The number of steps performed by the algorithm during the reconstruction of the second cycle.
            </returns>
            <remarks>
            The provided Hamiltonian cycle will be modified in-place to represent the second Hamiltonian cycle.
            Make sure to pass a deep copy if the original cycle should be preserved.
            </remarks>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Algorithm.LollipopAlgorithm.ReconstructCycleAndReturnStepCount(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}},ThomasonAlgorithm.Core.Graphs.CubicGraph)">
            <summary>
            Applies Thomason's lollipop algorithm to reconstruct a second Hamiltonian cycle
            from the provided Hamiltonian cycle and returns the number of algorithm steps performed.
            </summary>
            <param name="hamiltonianCycle">
            A dictionary representing the original Hamiltonian cycle. The keys are vertex indices,
            and the values are lists of neighboring vertices in the cycle.
            This structure will be modified in-place to represent the new cycle.
            </param>
            <param name="graph">
            The cubic graph on which the algorithm is executed. It provides adjacency information
            necessary to guide the reconstruction process.
            </param>
            <returns>
            The total number of steps taken by the algorithm during the reconstruction of the cycle.
            </returns>
            <remarks>
            The method mutates the provided <paramref name="hamiltonianCycle"/> by breaking and reconnecting edges
            in accordance with Thomason's lollipop algorithm until a second Hamiltonian cycle is formed.
            The cycle is expected to be valid and consistent with the graph structure at the start of execution.
            </remarks>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Algorithm.LollipopAlgorithm.GetVertexNeighbors(System.Int32,ThomasonAlgorithm.Core.Graphs.CubicGraph)">
            <summary>
            Returns a list of neighbors for the specified vertex in the given cubic graph.
            </summary>
            <param name="v">The vertex for which neighbors are to be found.</param>
            <param name="graph">The cubic graph containing the adjacency matrix.</param>
            <returns>A list of vertex indices that are neighbors of the specified vertex.</returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Algorithm.LollipopAlgorithm.GetVertexNeighborsInCycle(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}})">
            <summary>
            Returns the list of neighbors of the specified vertex within the Hamiltonian cycle.
            </summary>
            <param name="v">The vertex whose neighbors in the cycle are to be retrieved.</param>
            <param name="hamiltonianCycle">The Hamiltonian cycle represented as a dictionary of vertex adjacency lists.</param>
            <returns>A list of neighbors of the specified vertex within the Hamiltonian cycle.</returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Algorithm.LollipopAlgorithm.GetNewEdgeEnd(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}},ThomasonAlgorithm.Core.Graphs.CubicGraph)">
            <summary>
            Performs one of the steps of the lollipop algorithm by extending the current Hamiltonian path.
            For a vertex of degree 1 in the path (i.e., connected by only one edge),
            this method finds a neighbor not yet included in the cycle (and not the previously unlinked vertex),
            and adds an edge to that neighbor in the cycle.
            </summary>
            <param name="previousNeib">The vertex that was just disconnected from the current vertex.</param>
            <param name="currentVertex">The current vertex of degree 1 in the cycle that needs to be extended.</param>
            <param name="hamiltonianCycle">The current state of the Hamiltonian cycle, where some vertices may have -1 among neighbors.</param>
            <param name="graph">The full cubic graph structure, used to get all neighbors of the current vertex.</param>
            <returns>The neighbor vertex that was added to the Hamiltonian path.</returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Algorithm.LollipopAlgorithm.GetNeighborToUnlink(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}})">
            <summary>
            Determines which neighbor of the current vertex should be unlinked from the Hamiltonian path.
            This is used when the current vertex has degree 3 in the path, and the algorithm needs to break
            an internal cycle formed within the Hamiltonian path.
            The method checks both directions of the path from the current vertex to identify the correct neighbor
            to disconnect in order to continue the reconstruction.
            </summary>
            <param name="currentVertex">The vertex of degree 3 in the Hamiltonian path from which the cycle should be broken.</param>
            <param name="hamiltonianCycle">The current state of the Hamiltonian cycle.</param>
            <returns>The neighbor vertex to be unlinked from the cycle.</returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Algorithm.LollipopAlgorithm.CheckCycle(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}})">
            <summary>
            Determines whether a cycle exists in the Hamiltonian path, starting from the given vertex
            and moving in the direction of the specified neighbor.
            This method is used to detect whether the traversal along the Hamiltonian cycle
            forms a closed loop (cycle) or reaches a vertex that is not fully connected (i.e., has a -1 entry).
            </summary>
            <param name="traversalStartingVertex">The starting vertex of the traversal.</param>
            <param name="neighbor">The neighbor vertex to move toward initially.</param>
            <param name="hamiltonianCycle">The current Hamiltonian cycle structure (may be partially modified).</param>
            <returns>
            True if a complete cycle is detected by traversing neighbor;
            False if the traversal leads to an unconnected vertex, indicating no cycle.
            </returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Algorithm.LollipopAlgorithm.GetHamiltonianCycleSequencedVertices(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Int32}})">
            <summary>
            Gets the set of vertices in the Hamiltonian cycle, ordered in the sequence 
            they appear in the cycle, starting from vertex 0.
            </summary>
            <param name="hamiltonianCycle">A dictionary representing the Hamiltonian cycle,
            where each vertex is mapped to its list of neighbors in the cycle.</param>
            <returns>A <see cref="T:System.Collections.Generic.HashSet`1"/> containing the vertices of the Hamiltonian cycle
            in the order they appear in the cycle starting from 0.</returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Extensions.ListExtensions.FirstPossibleNeighborOrNull(System.Collections.Generic.List{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            Returns the first element in the list that satisfies the specified predicate, or <c>null</c> if no such element exists.
            </summary>
            <param name="source">The list of integers to search through.</param>
            <param name="predicate">The predicate function used to test each element.</param>
            <returns>
            The first element that matches the predicate, or <c>null</c> if no matching element is found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> or <paramref name="predicate"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator">
            <summary>
            A utility class for generating random cubic (3-regular) graphs with a specified number of vertices.
            The generated graph ensures that each vertex has exactly 3 neighbors, adhering to the properties of a cubic graph.
            Additionally, this class provides methods for generating cubic graphs with various constraints on chord lengths.
            </summary>
        </member>
        <member name="M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphLimitedChords(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a cubic graph (3-regular graph) where chord lengths are restricted to be within the inclusive range [kLow, kUp].
            </summary>
            <param name="n">The number of vertices in the graph. Must be an even number ≥ 4.</param>
            <param name="kLow">The minimum allowed chord length (inclusive).</param>
            <param name="kUp">The maximum allowed chord length (inclusive).</param>
            <param name="maxAttempts">Maximum number of attempts to generate a valid graph. Default is 100.</param>
            <returns>
            A cubic graph where all chords have lengths within the range [<paramref name="kLow"/>, <paramref name="kUp"/>],
            or <c>null</c> if generation fails within the given number of attempts.
            </returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithOddLengthChords(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a cubic graph (3-regular graph) where only chords of odd lengths within the given bounds are allowed.
            The resulting graph is guaranteed to be bipartite due to the restriction on odd-length chords.
            </summary>
            <param name="n">The number of vertices in the graph. Must be an even number ≥ 4.</param>
            <param name="kLow">The minimum chord length (inclusive).</param>
            <param name="kUp">The maximum chord length (inclusive).</param>
            <param name="maxAttempts">Maximum number of attempts to generate a valid graph. Default is 100.</param>
            <returns>
            A bipartite cubic graph containing only odd-length chords in the range [<paramref name="kLow"/>, <paramref name="kUp"/>],
            or <c>null</c> if generation fails within the given number of attempts.
            </returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphWithGapInChordLengths(System.Int32,System.Int32,System.Int32,ThomasonAlgorithm.Core.Models.Gap,System.Int32)">
            <summary>
            Generates a cubic graph (3-regular graph) where chord lengths are within the specified range
            <paramref name="kLow"/> to <paramref name="kUp"/>, but exclude a specific gap range.
            </summary>
            <param name="n">The number of vertices in the graph. Must be an even number ≥ 4.</param>
            <param name="kLow">The minimum allowed chord length.</param>
            <param name="kUp">The maximum allowed chord length.</param>
            <param name="gap">
            A <see cref="T:ThomasonAlgorithm.Core.Models.Gap"/> struct specifying the range of chord lengths to exclude from the graph.
            For example, if the gap is [5–7], then chords of lengths 5, 6, and 7 will be excluded.
            </param>
            <param name="maxAttempts">Maximum number of attempts to generate a valid graph. Default is 100.</param>
            <returns>
            A cubic graph that avoids the specified gap in chord lengths, or <c>null</c> if no valid graph is found
            within the allowed number of attempts.
            </returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateGraphFromExactChordsSet(System.Int32,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Generates a cubic graph (3-regular graph) with a precise number of chords for each specified chord length.
            </summary>
            <param name="n">The number of vertices in the graph. Must be an even number ≥ 4.</param>
            <param name="kLow">The minimum allowed chord length.</param>
            <param name="kUp">The maximum allowed chord length.</param>
            <param name="chordsLengthDictionary">
            A dictionary mapping chord lengths to the exact number of chords of that length that must appear in the graph.
            </param>
            <param name="maxAttempts">The maximum number of attempts to generate a valid graph. Default is 100.</param>
            <returns>
            A cubic graph that matches the exact chord length distribution if one is found within the allowed attempts;
            otherwise, returns <c>null</c>.
            </returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateCubicGraphWithChordConstraint(System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            Generates a random cubic graph (3-regular graph) where possible chord connections 
            are filtered using the provided predicate on chord lengths.
            </summary>
            <param name="n">The number of vertices in the graph. Must be an even number ≥ 4.</param>
            <param name="kLow">The minimum allowed chord length.</param>
            <param name="kUp">The maximum allowed chord length.</param>
            <param name="chordLengthPredicate">A predicate function that determines whether a given chord length is allowed.</param>
            <param name="maxAttempts">The maximum number of attempts to generate a valid graph.</param>
            <returns>
            A cubic graph satisfying the chord constraint if generation succeeds within the attempt limit;
            otherwise, returns <c>null</c>.
            </returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GenerateCubicGraphFromExactChordsSet(System.Int32,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Generates a cubic graph (3-regular graph) where the set of chords exactly matches the specified count for each chord length.
            </summary>
            <param name="n">The number of vertices in the graph. Must be an even number ≥ 4.</param>
            <param name="kLow">The minimum possible chord length.</param>
            <param name="kUp">The maximum possible chord length.</param>
            <param name="chordsLengthDictionary">
            A dictionary specifying the exact number of chords required for each chord length.
            Keys are chord lengths, values are the number of chords of that length required in the graph.
            </param>
            <param name="maxAttempts">The maximum number of attempts to generate a valid graph.</param>
            <returns>
            A cubic graph satisfying the exact chord length distribution if found within the allowed attempts;
            otherwise, returns <c>null</c>.
            </returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.GetPossibleNeighbors(System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            Generates a dictionary of possible neighbors for each vertex in a graph,
            based on the provided chord length predicate. This predicate is used to 
            filter the valid chord lengths between vertices in the graph.
            </summary>
            <param name="n">The number of vertices in the graph.</param>
            <param name="chordLengthPredicate">A predicate function that determines 
            whether a chord length between two vertices is valid.</param>
            <returns>A dictionary where the key is a vertex, and the value is a 
            HashSet of neighboring vertices that satisfy the chord length condition.</returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.FindPerfectMatching(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.HashSet{System.Int32}},ThomasonAlgorithm.Core.Graphs.CubicGraph)">
            <summary>
            Tries to find a perfect matching in the given graph using the provided possible neighbors for each vertex.
            A perfect matching is a set of edges such that every vertex is matched with exactly one other vertex.
            </summary>
            <param name="n">The number of vertices in the graph.</param>
            <param name="possibleNeighbors">A dictionary where the key is a vertex, and the value is a HashSet of neighboring vertices 
            that could potentially be matched with the vertex.</param>
            <param name="graph">The graph in which the perfect matching is being searched for. The graph will be updated with the 
            lengths of the chords that form part of the matching.</param>
            <returns>A list of pairs of vertices representing the perfect matching, or null if a perfect matching is not found.</returns>
            <remarks>
            The method tries to find a random matching for each vertex, ensuring that no vertex is used in more than one edge 
            and that the number of edges in the matching matches the total number of vertices in the graph.
            If a perfect matching cannot be found for all vertices, the method will return null.
            </remarks>
        </member>
        <member name="M:ThomasonAlgorithm.Core.GraphGenerators.RandomCubicGraphGenerator.FindPerfectMatching(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.HashSet{System.Int32}},ThomasonAlgorithm.Core.Graphs.CubicGraph,System.Int32[])">
            <summary>
            Tries to find a perfect matching in the graph, where the number of edges with specific chord lengths 
            corresponds exactly to the provided `neededChords` array. Each entry in `neededChords` specifies 
            the required number of edges of a particular length.
            </summary>
            <param name="n">The number of vertices in the graph.</param>
            <param name="possibleNeighbors">A dictionary where the key is a vertex, and the value is a HashSet of neighboring vertices 
            that could potentially be matched with the vertex.</param>
            <param name="graph">The graph in which the perfect matching is being searched for. The graph will be updated with the 
            lengths of the chords that form part of the matching.</param>
            <param name="neededChords">An array where the index represents the chord length, and the value at each index 
            specifies how many edges of that particular length are needed in the perfect matching.</param>
            <returns>A list of pairs of vertices representing the perfect matching, or null if a perfect matching is not found.</returns>
            <remarks>
            The method tries to find a random matching for each vertex while ensuring that the number of edges of each 
            chord length in the matching matches the number of times that length is needed as specified in the `neededChords` array.
            If a perfect matching cannot be found that satisfies the required chord lengths, the method will return null.
            </remarks>
        </member>
        <member name="T:ThomasonAlgorithm.Core.Graphs.CubicGraph">
            <summary>
            Represents a cubic (3-regular) graph, where each vertex has exactly 3 neighbors.
            This class manages the graph structure, chord lengths, and Hamiltonian cycle.
            </summary>
        </member>
        <member name="P:ThomasonAlgorithm.Core.Graphs.CubicGraph.VertexCount">
            <summary>
            Gets the total number of vertices in the graph.
            </summary>
        </member>
        <member name="F:ThomasonAlgorithm.Core.Graphs.CubicGraph.MaxChordLength">
            <summary>
            Gets or sets the maximum chord length found in the graph.
            </summary>
        </member>
        <member name="F:ThomasonAlgorithm.Core.Graphs.CubicGraph.ChordsLengths">
            <summary>
            Dictionary holding the chord lengths and the number of times each chord length occurs.
            </summary>
        </member>
        <member name="P:ThomasonAlgorithm.Core.Graphs.CubicGraph.HamiltonianCycle">
            <summary>
            Stores the Hamiltonian cycle of the graph, represented as a dictionary of vertices and their neighbors in the cycle.
            </summary>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Graphs.CubicGraph.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThomasonAlgorithm.Core.Graphs.CubicGraph"/> class with an empty adjacency matrix of the specified size.
            </summary>
            <param name="size">The number of vertices in the graph (the size of the square adjacency matrix).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="size"/> is less than 4.
            </exception>
            <remarks>
            This constructor creates a graph with a zero-initialized adjacency matrix, allowing for manual or programmatic 
            construction of edges. It does not enforce the cubic property upon creation. 
            The resulting graph must be later modified to ensure that each vertex has degree 3 (i.e., the graph becomes cubic).
            </remarks>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Graphs.CubicGraph.#ctor(System.Int32[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:ThomasonAlgorithm.Core.Graphs.CubicGraph"/> class using the provided adjacency matrix.
            </summary>
            <param name="adjacencyMatrix">A square matrix representing the adjacency structure of the graph.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the provided adjacency matrix does not correspond to a valid cubic graph,
            i.e., each vertex must have exactly three edges.
            </exception>
            <remarks>
            This constructor ensures that the input graph is cubic at the time of initialization. 
            </remarks>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Graphs.CubicGraph.AddEdge(System.Int32,System.Int32)">
            <summary>
            Adds an edge between two vertices, ensuring the graph remains cubic (3-regular).
            </summary>
            <param name="from">The starting vertex of the edge.</param>
            <param name="to">The ending vertex of the edge.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if an edge already exists or the degree of a vertex exceeds 3.</exception>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Graphs.CubicGraph.RemoveEdge(System.Int32,System.Int32)">
            <summary>
            Removes an edge between two vertices.
            </summary>
            <param name="from">The starting vertex of the edge.</param>
            <param name="to">The ending vertex of the edge.</param>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Graphs.CubicGraph.GetVertexDegree(System.Int32)">
            <summary>
            Gets the degree of a vertex (the number of edges connected to it).
            </summary>
            <param name="vertex">The vertex whose degree is to be calculated.</param>
            <returns>The degree of the specified vertex.</returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Graphs.CubicGraph.GetNeighbors(System.Int32)">
            <summary>
            Gets the list of neighbors (vertices connected by edges) for a specified vertex.
            </summary>
            <param name="vertex">The vertex for which neighbors are to be retrieved.</param>
            <returns>A list of neighboring vertices.</returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Graphs.CubicGraph.HasEdge(System.Int32,System.Int32)">
            <summary>
            Checks whether an edge exists between two vertices.
            </summary>
            <param name="from">The starting vertex of the edge.</param>
            <param name="to">The ending vertex of the edge.</param>
            <returns>True if an edge exists between the two vertices; otherwise, false.</returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Graphs.CubicGraph.IsCubic">
            <summary>
            Checks if the graph is cubic, meaning each vertex has exactly 3 neighbors.
            </summary>
            <returns>True if the graph is cubic; otherwise, false.</returns>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Graphs.CubicGraph.AddChordLength(System.Int32)">
            <summary>
            Adds a chord length to the collection, increasing its count. 
            If the chord length doesn't exist in the collection, it will be added with an initial count of 1.
            Additionally, the method updates the maximum chord length if the new chord length exceeds the current maximum.
            </summary>
            <param name="chordLength">The length of the chord to be added.</param>
            <remarks>
            This method maintains a collection of chord lengths, where each chord length is mapped to its frequency (how many times it has been added).
            It also keeps track of the maximum chord length encountered during the process.
            </remarks>
        </member>
        <member name="T:ThomasonAlgorithm.Core.Graphs.CubicGraphWithCycle">
            <summary>
            Represents a cubic graph with an associated Hamiltonian cycle. 
            Provides functionality to initialize the graph with or without a provided cycle.
            </summary>
            <remarks>
            This class ensures that a Hamiltonian cycle is explicitly associated with a specific cubic graph,
            providing better consistency and clarity when passing this data between methods or components.
            </remarks>
        </member>
        <member name="T:ThomasonAlgorithm.Core.Models.Gap">
            <summary>
            Represents a range (gap) of integer values with a specified lower and upper bound.
            This is used to define a range of chord lengths to exclude or consider in graph generation.
            </summary>
            <param name="LeftBound">The inclusive lower bound of the gap range.</param>
            <param name="RightBound">The inclusive upper bound of the gap range.</param>
        </member>
        <member name="M:ThomasonAlgorithm.Core.Models.Gap.#ctor(System.Int32,System.Int32)">
            <summary>
            Represents a range (gap) of integer values with a specified lower and upper bound.
            This is used to define a range of chord lengths to exclude or consider in graph generation.
            </summary>
            <param name="LeftBound">The inclusive lower bound of the gap range.</param>
            <param name="RightBound">The inclusive upper bound of the gap range.</param>
        </member>
        <member name="P:ThomasonAlgorithm.Core.Models.Gap.LeftBound">
            <summary>The inclusive lower bound of the gap range.</summary>
        </member>
        <member name="P:ThomasonAlgorithm.Core.Models.Gap.RightBound">
            <summary>The inclusive upper bound of the gap range.</summary>
        </member>
    </members>
</doc>
