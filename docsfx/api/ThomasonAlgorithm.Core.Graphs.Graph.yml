### YamlMime:ManagedReference
items:
- uid: ThomasonAlgorithm.Core.Graphs.Graph
  commentId: T:ThomasonAlgorithm.Core.Graphs.Graph
  id: Graph
  parent: ThomasonAlgorithm.Core.Graphs
  children:
  - ThomasonAlgorithm.Core.Graphs.Graph.#ctor(System.Int32)
  - ThomasonAlgorithm.Core.Graphs.Graph.#ctor(System.Int32[0:,0:])
  - ThomasonAlgorithm.Core.Graphs.Graph.AddEdge(System.Int32,System.Int32)
  - ThomasonAlgorithm.Core.Graphs.Graph.AdjacencyMatrix
  - ThomasonAlgorithm.Core.Graphs.Graph.GetNeighbors(System.Int32)
  - ThomasonAlgorithm.Core.Graphs.Graph.GetVertexDegree(System.Int32)
  - ThomasonAlgorithm.Core.Graphs.Graph.HasEdge(System.Int32,System.Int32)
  - ThomasonAlgorithm.Core.Graphs.Graph.IsCubic
  - ThomasonAlgorithm.Core.Graphs.Graph.IsRegular(System.Int32)
  - ThomasonAlgorithm.Core.Graphs.Graph.RemoveEdge(System.Int32,System.Int32)
  - ThomasonAlgorithm.Core.Graphs.Graph.VertexCount
  langs:
  - csharp
  - vb
  name: Graph
  nameWithType: Graph
  fullName: ThomasonAlgorithm.Core.Graphs.Graph
  type: Class
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/Graph.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: Graph
    path: ../src/ThomasonAlgorithm.Core/Graphs/Graph.cs
    startLine: 20
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Represents an unweighted, undirected graph data structure using an adjacency matrix.
  remarks: >-
    <p>

    This class provides a foundation for graph operations using a square matrix

    to represent vertex connections in an unweighted, undirected graph.

    The matrix is immutable after construction.

    </p>

    <p>

    Key characteristics:

    </p>

    <ul><li>Unweighted edges (values are 0 or 1)</li><li>Undirected (matrix is always symmetric)</li><li>No self-loops (diagonal elements are always 0)</li></ul>
  example: []
  syntax:
    content: public class Graph
    content.vb: Public Class Graph
  inheritance:
  - System.Object
  derivedClasses:
  - ThomasonAlgorithm.Core.Graphs.CubicGraph
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: ThomasonAlgorithm.Core.Graphs.Graph.AdjacencyMatrix
  commentId: F:ThomasonAlgorithm.Core.Graphs.Graph.AdjacencyMatrix
  id: AdjacencyMatrix
  parent: ThomasonAlgorithm.Core.Graphs.Graph
  langs:
  - csharp
  - vb
  name: AdjacencyMatrix
  nameWithType: Graph.AdjacencyMatrix
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.AdjacencyMatrix
  type: Field
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/Graph.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: AdjacencyMatrix
    path: ../src/ThomasonAlgorithm.Core/Graphs/Graph.cs
    startLine: 40
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: The adjacency matrix representing connections between vertices in an unweighted, undirected graph.
  remarks: >-
    <p>

    Matrix characteristics:

    </p>

    <ul><li>0 indicates no edge between vertices</li><li>1 indicates an existing edge (unweighted)</li><li>Symmetric (matrix[i,j] == matrix[j,i] for undirected graphs)</li><li>Zero diagonal (matrix[i,i] == 0, no self-loops)</li></ul>

    <p>

    This field is readonly - the matrix reference cannot be reassigned, though individual 

    elements can be modified through controlled methods like <xref href="ThomasonAlgorithm.Core.Graphs.Graph.AddEdge(System.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public readonly int[,] AdjacencyMatrix
    return:
      type: System.Int32[,]
    content.vb: Public ReadOnly AdjacencyMatrix As Integer(,)
- uid: ThomasonAlgorithm.Core.Graphs.Graph.VertexCount
  commentId: P:ThomasonAlgorithm.Core.Graphs.Graph.VertexCount
  id: VertexCount
  parent: ThomasonAlgorithm.Core.Graphs.Graph
  langs:
  - csharp
  - vb
  name: VertexCount
  nameWithType: Graph.VertexCount
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.VertexCount
  type: Property
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/Graph.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: VertexCount
    path: ../src/ThomasonAlgorithm.Core/Graphs/Graph.cs
    startLine: 45
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Gets the total number of vertices in the graph.
  example: []
  syntax:
    content: public int VertexCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property VertexCount As Integer
  overload: ThomasonAlgorithm.Core.Graphs.Graph.VertexCount*
- uid: ThomasonAlgorithm.Core.Graphs.Graph.#ctor(System.Int32)
  commentId: M:ThomasonAlgorithm.Core.Graphs.Graph.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: ThomasonAlgorithm.Core.Graphs.Graph
  langs:
  - csharp
  - vb
  name: Graph(int)
  nameWithType: Graph.Graph(int)
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.Graph(int)
  type: Constructor
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/Graph.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: .ctor
    path: ../src/ThomasonAlgorithm.Core/Graphs/Graph.cs
    startLine: 71
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Initializes a new unweighted, undirected graph with the specified number of vertices.
  remarks: >-
    Creates an empty adjacency matrix where:

    <ul><li>All elements are initialized to 0 (no edges)</li><li>Matrix dimensions are size × size</li><li>Will remain symmetric (undirected) when edges are added</li></ul>
  example:
  - >-
    Create a 5-vertex graph:

    <pre><code class="lang-csharp">var graph = new Graph(5); // Creates 5x5 matrix initialized with zeros</code></pre>
  syntax:
    content: public Graph(int size)
    parameters:
    - id: size
      type: System.Int32
      description: >-
        The number of vertices in the graph. 

        Must be a positive integer greater than 0.
    content.vb: Public Sub New(size As Integer)
  overload: ThomasonAlgorithm.Core.Graphs.Graph.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when <code class="paramref">size</code> is less than 1.
  nameWithType.vb: Graph.New(Integer)
  fullName.vb: ThomasonAlgorithm.Core.Graphs.Graph.New(Integer)
  name.vb: New(Integer)
- uid: ThomasonAlgorithm.Core.Graphs.Graph.#ctor(System.Int32[0:,0:])
  commentId: M:ThomasonAlgorithm.Core.Graphs.Graph.#ctor(System.Int32[0:,0:])
  id: '#ctor(System.Int32[0:,0:])'
  parent: ThomasonAlgorithm.Core.Graphs.Graph
  langs:
  - csharp
  - vb
  name: Graph(int[,])
  nameWithType: Graph.Graph(int[,])
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.Graph(int[,])
  type: Constructor
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/Graph.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: .ctor
    path: ../src/ThomasonAlgorithm.Core/Graphs/Graph.cs
    startLine: 118
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Initializes a new instance of the <xref href="ThomasonAlgorithm.Core.Graphs.Graph" data-throw-if-not-resolved="false"></xref> class using the provided adjacency matrix.
  remarks: >-
    <p>

    This constructor creates an unweighted, undirected graph based on the provided adjacency matrix.

    The matrix is cloned to prevent external modifications and ensure immutability after initialization.

    </p>

    <p>

    The adjacency matrix must satisfy the following conditions:

    <ul><li>Must be non-null</li><li>Must be square (n × n)</li><li>Must be binary (contain only 0 or 1)</li><li>Must be symmetric (matrix[i,j] == matrix[j,i])</li><li>Must have zero diagonal (no self-loops, matrix[i,i] == 0)</li></ul>

    </p>
  example:
  - >-
    Create a graph from a 3-vertex adjacency matrix:

    <pre><code class="lang-csharp">int[,] matrix = new int[,]

    {
        {0, 1, 0},
        {1, 0, 1},
        {0, 1, 0}
    };

    var graph = new Graph(matrix);</code></pre>
  syntax:
    content: public Graph(int[,] adjacencyMatrix)
    parameters:
    - id: adjacencyMatrix
      type: System.Int32[,]
      description: >-
        A square, binary, symmetric matrix representing the adjacency structure of the graph.

        Elements are 0 (no edge) or 1 (edge exists).
    content.vb: Public Sub New(adjacencyMatrix As Integer(,))
  overload: ThomasonAlgorithm.Core.Graphs.Graph.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">adjacencyMatrix</code> is <code>null</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      Thrown when <code class="paramref">adjacencyMatrix</code> is not square, not binary, not symmetric,

      or contains non-zero diagonal elements.
  nameWithType.vb: Graph.New(Integer(,))
  fullName.vb: ThomasonAlgorithm.Core.Graphs.Graph.New(Integer(,))
  name.vb: New(Integer(,))
- uid: ThomasonAlgorithm.Core.Graphs.Graph.AddEdge(System.Int32,System.Int32)
  commentId: M:ThomasonAlgorithm.Core.Graphs.Graph.AddEdge(System.Int32,System.Int32)
  id: AddEdge(System.Int32,System.Int32)
  parent: ThomasonAlgorithm.Core.Graphs.Graph
  langs:
  - csharp
  - vb
  name: AddEdge(int, int)
  nameWithType: Graph.AddEdge(int, int)
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.AddEdge(int, int)
  type: Method
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/Graph.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: AddEdge
    path: ../src/ThomasonAlgorithm.Core/Graphs/Graph.cs
    startLine: 131
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Adds an edge between two vertices
  example: []
  syntax:
    content: public void AddEdge(int from, int to)
    parameters:
    - id: from
      type: System.Int32
      description: The starting vertex of the edge.
    - id: to
      type: System.Int32
      description: The ending vertex of the edge.
    content.vb: Public Sub AddEdge(from As Integer, [to] As Integer)
  overload: ThomasonAlgorithm.Core.Graphs.Graph.AddEdge*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if an edge already exists.
  nameWithType.vb: Graph.AddEdge(Integer, Integer)
  fullName.vb: ThomasonAlgorithm.Core.Graphs.Graph.AddEdge(Integer, Integer)
  name.vb: AddEdge(Integer, Integer)
- uid: ThomasonAlgorithm.Core.Graphs.Graph.HasEdge(System.Int32,System.Int32)
  commentId: M:ThomasonAlgorithm.Core.Graphs.Graph.HasEdge(System.Int32,System.Int32)
  id: HasEdge(System.Int32,System.Int32)
  parent: ThomasonAlgorithm.Core.Graphs.Graph
  langs:
  - csharp
  - vb
  name: HasEdge(int, int)
  nameWithType: Graph.HasEdge(int, int)
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.HasEdge(int, int)
  type: Method
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/Graph.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: HasEdge
    path: ../src/ThomasonAlgorithm.Core/Graphs/Graph.cs
    startLine: 155
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Checks whether an edge exists between two vertices.
  example: []
  syntax:
    content: public bool HasEdge(int from, int to)
    parameters:
    - id: from
      type: System.Int32
      description: The starting vertex of the edge.
    - id: to
      type: System.Int32
      description: The ending vertex of the edge.
    return:
      type: System.Boolean
      description: True if an edge exists between the two vertices; otherwise, false.
    content.vb: Public Function HasEdge(from As Integer, [to] As Integer) As Boolean
  overload: ThomasonAlgorithm.Core.Graphs.Graph.HasEdge*
  nameWithType.vb: Graph.HasEdge(Integer, Integer)
  fullName.vb: ThomasonAlgorithm.Core.Graphs.Graph.HasEdge(Integer, Integer)
  name.vb: HasEdge(Integer, Integer)
- uid: ThomasonAlgorithm.Core.Graphs.Graph.RemoveEdge(System.Int32,System.Int32)
  commentId: M:ThomasonAlgorithm.Core.Graphs.Graph.RemoveEdge(System.Int32,System.Int32)
  id: RemoveEdge(System.Int32,System.Int32)
  parent: ThomasonAlgorithm.Core.Graphs.Graph
  langs:
  - csharp
  - vb
  name: RemoveEdge(int, int)
  nameWithType: Graph.RemoveEdge(int, int)
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.RemoveEdge(int, int)
  type: Method
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/Graph.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: RemoveEdge
    path: ../src/ThomasonAlgorithm.Core/Graphs/Graph.cs
    startLine: 167
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Removes an edge between two vertices.
  example: []
  syntax:
    content: public void RemoveEdge(int from, int to)
    parameters:
    - id: from
      type: System.Int32
      description: The starting vertex of the edge.
    - id: to
      type: System.Int32
      description: The ending vertex of the edge.
    content.vb: Public Sub RemoveEdge(from As Integer, [to] As Integer)
  overload: ThomasonAlgorithm.Core.Graphs.Graph.RemoveEdge*
  nameWithType.vb: Graph.RemoveEdge(Integer, Integer)
  fullName.vb: ThomasonAlgorithm.Core.Graphs.Graph.RemoveEdge(Integer, Integer)
  name.vb: RemoveEdge(Integer, Integer)
- uid: ThomasonAlgorithm.Core.Graphs.Graph.GetVertexDegree(System.Int32)
  commentId: M:ThomasonAlgorithm.Core.Graphs.Graph.GetVertexDegree(System.Int32)
  id: GetVertexDegree(System.Int32)
  parent: ThomasonAlgorithm.Core.Graphs.Graph
  langs:
  - csharp
  - vb
  name: GetVertexDegree(int)
  nameWithType: Graph.GetVertexDegree(int)
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.GetVertexDegree(int)
  type: Method
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/Graph.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: GetVertexDegree
    path: ../src/ThomasonAlgorithm.Core/Graphs/Graph.cs
    startLine: 181
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Gets the degree of a vertex (the number of edges connected to it).
  example: []
  syntax:
    content: public int GetVertexDegree(int vertex)
    parameters:
    - id: vertex
      type: System.Int32
      description: The vertex whose degree is to be calculated.
    return:
      type: System.Int32
      description: The degree of the specified vertex.
    content.vb: Public Function GetVertexDegree(vertex As Integer) As Integer
  overload: ThomasonAlgorithm.Core.Graphs.Graph.GetVertexDegree*
  nameWithType.vb: Graph.GetVertexDegree(Integer)
  fullName.vb: ThomasonAlgorithm.Core.Graphs.Graph.GetVertexDegree(Integer)
  name.vb: GetVertexDegree(Integer)
- uid: ThomasonAlgorithm.Core.Graphs.Graph.GetNeighbors(System.Int32)
  commentId: M:ThomasonAlgorithm.Core.Graphs.Graph.GetNeighbors(System.Int32)
  id: GetNeighbors(System.Int32)
  parent: ThomasonAlgorithm.Core.Graphs.Graph
  langs:
  - csharp
  - vb
  name: GetNeighbors(int)
  nameWithType: Graph.GetNeighbors(int)
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.GetNeighbors(int)
  type: Method
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/Graph.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: GetNeighbors
    path: ../src/ThomasonAlgorithm.Core/Graphs/Graph.cs
    startLine: 195
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Gets the list of neighbors (vertices connected by edges) for a specified vertex.
  example: []
  syntax:
    content: public List<int> GetNeighbors(int vertex)
    parameters:
    - id: vertex
      type: System.Int32
      description: The vertex for which neighbors are to be retrieved.
    return:
      type: System.Collections.Generic.List{System.Int32}
      description: A list of neighboring vertices.
    content.vb: Public Function GetNeighbors(vertex As Integer) As List(Of Integer)
  overload: ThomasonAlgorithm.Core.Graphs.Graph.GetNeighbors*
  nameWithType.vb: Graph.GetNeighbors(Integer)
  fullName.vb: ThomasonAlgorithm.Core.Graphs.Graph.GetNeighbors(Integer)
  name.vb: GetNeighbors(Integer)
- uid: ThomasonAlgorithm.Core.Graphs.Graph.IsRegular(System.Int32)
  commentId: M:ThomasonAlgorithm.Core.Graphs.Graph.IsRegular(System.Int32)
  id: IsRegular(System.Int32)
  parent: ThomasonAlgorithm.Core.Graphs.Graph
  langs:
  - csharp
  - vb
  name: IsRegular(int)
  nameWithType: Graph.IsRegular(int)
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.IsRegular(int)
  type: Method
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/Graph.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: IsRegular
    path: ../src/ThomasonAlgorithm.Core/Graphs/Graph.cs
    startLine: 233
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Determines whether the graph is regular with the specified degree for all vertices.
  remarks: >-
    A graph is called <code class="paramref">regularity</code>-regular if every vertex has exactly 

    <code class="paramref">regularity</code> edges. Common cases include:

    <ul><li>3-regular (cubic) graphs</li><li>2-regular (cycle graphs)</li><li>1-regular (perfect matching graphs)</li></ul>
  example:
  - >-
    Check if a graph is cubic (3-regular):

    <pre><code class="lang-csharp">if (graph.IsRegular(3)) 

    {
        Console.WriteLine("The graph is cubic");
    }</code></pre>
  syntax:
    content: public bool IsRegular(int regularity)
    parameters:
    - id: regularity
      type: System.Int32
      description: The expected degree for all vertices in the graph.
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if every vertex in the graph has degree equal to <code class="paramref">regularity</code>;

        otherwise, <code>false</code>.
    content.vb: Public Function IsRegular(regularity As Integer) As Boolean
  overload: ThomasonAlgorithm.Core.Graphs.Graph.IsRegular*
  nameWithType.vb: Graph.IsRegular(Integer)
  fullName.vb: ThomasonAlgorithm.Core.Graphs.Graph.IsRegular(Integer)
  name.vb: IsRegular(Integer)
- uid: ThomasonAlgorithm.Core.Graphs.Graph.IsCubic
  commentId: M:ThomasonAlgorithm.Core.Graphs.Graph.IsCubic
  id: IsCubic
  parent: ThomasonAlgorithm.Core.Graphs.Graph
  langs:
  - csharp
  - vb
  name: IsCubic()
  nameWithType: Graph.IsCubic()
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.IsCubic()
  type: Method
  source:
    remote:
      path: src/ThomasonAlgorithm.Core/Graphs/Graph.cs
      branch: second-release
      repo: https://github.com/DmitriiGoro/Thomason_algorithm_lollipop.git
    id: IsCubic
    path: ../src/ThomasonAlgorithm.Core/Graphs/Graph.cs
    startLine: 255
  assemblies:
  - ThomasonAlgorithm.Core
  namespace: ThomasonAlgorithm.Core.Graphs
  summary: Determines whether the graph is cubic (3-regular).
  remarks: >-
    A cubic graph is a 3-regular graph where every vertex has exactly three edges.

    This is equivalent to calling <xref href="ThomasonAlgorithm.Core.Graphs.Graph.IsRegular(System.Int32)" data-throw-if-not-resolved="false"></xref> with parameter 3.
  example:
  - >-
    Basic usage:

    <pre><code class="lang-csharp">if (graph.IsCubic()) 

    {
        Console.WriteLine("The graph is cubic");
    }</code></pre>
  syntax:
    content: public bool IsCubic()
    return:
      type: System.Boolean
      description: <code>true</code> if the graph is cubic (all vertices have degree 3); otherwise, <code>false</code>.
    content.vb: Public Function IsCubic() As Boolean
  overload: ThomasonAlgorithm.Core.Graphs.Graph.IsCubic*
references:
- uid: ThomasonAlgorithm.Core.Graphs
  commentId: N:ThomasonAlgorithm.Core.Graphs
  href: ThomasonAlgorithm.html
  name: ThomasonAlgorithm.Core.Graphs
  nameWithType: ThomasonAlgorithm.Core.Graphs
  fullName: ThomasonAlgorithm.Core.Graphs
  spec.csharp:
  - uid: ThomasonAlgorithm
    name: ThomasonAlgorithm
    href: ThomasonAlgorithm.html
  - name: .
  - uid: ThomasonAlgorithm.Core
    name: Core
    href: ThomasonAlgorithm.Core.html
  - name: .
  - uid: ThomasonAlgorithm.Core.Graphs
    name: Graphs
    href: ThomasonAlgorithm.Core.Graphs.html
  spec.vb:
  - uid: ThomasonAlgorithm
    name: ThomasonAlgorithm
    href: ThomasonAlgorithm.html
  - name: .
  - uid: ThomasonAlgorithm.Core
    name: Core
    href: ThomasonAlgorithm.Core.html
  - name: .
  - uid: ThomasonAlgorithm.Core.Graphs
    name: Graphs
    href: ThomasonAlgorithm.Core.Graphs.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: ThomasonAlgorithm.Core.Graphs.Graph.AddEdge(System.Int32,System.Int32)
  commentId: M:ThomasonAlgorithm.Core.Graphs.Graph.AddEdge(System.Int32,System.Int32)
  isExternal: true
  href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_AddEdge_System_Int32_System_Int32_
  name: AddEdge(int, int)
  nameWithType: Graph.AddEdge(int, int)
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.AddEdge(int, int)
  nameWithType.vb: Graph.AddEdge(Integer, Integer)
  fullName.vb: ThomasonAlgorithm.Core.Graphs.Graph.AddEdge(Integer, Integer)
  name.vb: AddEdge(Integer, Integer)
  spec.csharp:
  - uid: ThomasonAlgorithm.Core.Graphs.Graph.AddEdge(System.Int32,System.Int32)
    name: AddEdge
    href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_AddEdge_System_Int32_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: ThomasonAlgorithm.Core.Graphs.Graph.AddEdge(System.Int32,System.Int32)
    name: AddEdge
    href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_AddEdge_System_Int32_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Int32[,]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[,]
  nameWithType: int[,]
  fullName: int[,]
  nameWithType.vb: Integer(,)
  fullName.vb: Integer(,)
  name.vb: Integer(,)
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ','
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: ','
  - name: )
- uid: ThomasonAlgorithm.Core.Graphs.Graph.VertexCount*
  commentId: Overload:ThomasonAlgorithm.Core.Graphs.Graph.VertexCount
  href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_VertexCount
  name: VertexCount
  nameWithType: Graph.VertexCount
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.VertexCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: ThomasonAlgorithm.Core.Graphs.Graph.#ctor*
  commentId: Overload:ThomasonAlgorithm.Core.Graphs.Graph.#ctor
  href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph__ctor_System_Int32_
  name: Graph
  nameWithType: Graph.Graph
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.Graph
  nameWithType.vb: Graph.New
  fullName.vb: ThomasonAlgorithm.Core.Graphs.Graph.New
  name.vb: New
- uid: ThomasonAlgorithm.Core.Graphs.Graph
  commentId: T:ThomasonAlgorithm.Core.Graphs.Graph
  parent: ThomasonAlgorithm.Core.Graphs
  href: ThomasonAlgorithm.Core.Graphs.Graph.html
  name: Graph
  nameWithType: Graph
  fullName: ThomasonAlgorithm.Core.Graphs.Graph
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: ThomasonAlgorithm.Core.Graphs.Graph.AddEdge*
  commentId: Overload:ThomasonAlgorithm.Core.Graphs.Graph.AddEdge
  href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_AddEdge_System_Int32_System_Int32_
  name: AddEdge
  nameWithType: Graph.AddEdge
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.AddEdge
- uid: ThomasonAlgorithm.Core.Graphs.Graph.HasEdge*
  commentId: Overload:ThomasonAlgorithm.Core.Graphs.Graph.HasEdge
  href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_HasEdge_System_Int32_System_Int32_
  name: HasEdge
  nameWithType: Graph.HasEdge
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.HasEdge
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: ThomasonAlgorithm.Core.Graphs.Graph.RemoveEdge*
  commentId: Overload:ThomasonAlgorithm.Core.Graphs.Graph.RemoveEdge
  href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_RemoveEdge_System_Int32_System_Int32_
  name: RemoveEdge
  nameWithType: Graph.RemoveEdge
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.RemoveEdge
- uid: ThomasonAlgorithm.Core.Graphs.Graph.GetVertexDegree*
  commentId: Overload:ThomasonAlgorithm.Core.Graphs.Graph.GetVertexDegree
  href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_GetVertexDegree_System_Int32_
  name: GetVertexDegree
  nameWithType: Graph.GetVertexDegree
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.GetVertexDegree
- uid: ThomasonAlgorithm.Core.Graphs.Graph.GetNeighbors*
  commentId: Overload:ThomasonAlgorithm.Core.Graphs.Graph.GetNeighbors
  href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_GetNeighbors_System_Int32_
  name: GetNeighbors
  nameWithType: Graph.GetNeighbors
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.GetNeighbors
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<int>
  nameWithType: List<int>
  fullName: System.Collections.Generic.List<int>
  nameWithType.vb: List(Of Integer)
  fullName.vb: System.Collections.Generic.List(Of Integer)
  name.vb: List(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: ThomasonAlgorithm.Core.Graphs.Graph.IsRegular*
  commentId: Overload:ThomasonAlgorithm.Core.Graphs.Graph.IsRegular
  href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_IsRegular_System_Int32_
  name: IsRegular
  nameWithType: Graph.IsRegular
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.IsRegular
- uid: ThomasonAlgorithm.Core.Graphs.Graph.IsRegular(System.Int32)
  commentId: M:ThomasonAlgorithm.Core.Graphs.Graph.IsRegular(System.Int32)
  parent: ThomasonAlgorithm.Core.Graphs.Graph
  isExternal: true
  href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_IsRegular_System_Int32_
  name: IsRegular(int)
  nameWithType: Graph.IsRegular(int)
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.IsRegular(int)
  nameWithType.vb: Graph.IsRegular(Integer)
  fullName.vb: ThomasonAlgorithm.Core.Graphs.Graph.IsRegular(Integer)
  name.vb: IsRegular(Integer)
  spec.csharp:
  - uid: ThomasonAlgorithm.Core.Graphs.Graph.IsRegular(System.Int32)
    name: IsRegular
    href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_IsRegular_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: ThomasonAlgorithm.Core.Graphs.Graph.IsRegular(System.Int32)
    name: IsRegular
    href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_IsRegular_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: ThomasonAlgorithm.Core.Graphs.Graph.IsCubic*
  commentId: Overload:ThomasonAlgorithm.Core.Graphs.Graph.IsCubic
  href: ThomasonAlgorithm.Core.Graphs.Graph.html#ThomasonAlgorithm_Core_Graphs_Graph_IsCubic
  name: IsCubic
  nameWithType: Graph.IsCubic
  fullName: ThomasonAlgorithm.Core.Graphs.Graph.IsCubic
